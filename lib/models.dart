import 'package:flutter/material.dart';

class Pending_Data_Model {
  final order_id;
  final order_no;
  final umr_no;
  final customer_name;
  final order_date;
  final customer_mobile_no;
  final customer_age;
  final customer_gender;
  final customer_id;
  final customer_address;
  final service_name;
  final schedule_address;
  final schedule_dt;
  final instructions;
  final lattitude;
  final langitude;
  final assign_phlebotomist_id;
  final status;
  final outstanding_due;
  final smple_status;
  final REG_SLOT_DT;
  final SESSION_ID;
  final EMPLOYEE_ID;
  final PAID_AMOUNT;
  final REFERAL_SOURCE_ID;
  final DISCOUNT_POLICY_ID;
  final CLIENT_ID;
  final CLIENT_NAME;
  final CHANNEL;
  final REFERAL_DOCTOR;
  final MOBILE_NO2;
  final PINCODE;
  final AREA_ID;
  final LOC_ID;
  final SERVICE_NAMES;
  final CLINLICAL_SUMMARY;
  final QR_IMG;
  final DUE_RECOVERED;

  Pending_Data_Model({
    required this.order_id,
    required this.order_no,
    required this.umr_no,
    required this.customer_name,
    required this.order_date,
    required this.customer_mobile_no,
    required this.customer_age,
    required this.customer_gender,
    required this.customer_id,
    required this.customer_address,
    required this.service_name,
    required this.schedule_address,
    required this.schedule_dt,
    required this.instructions,
    required this.lattitude,
    required this.langitude,
    required this.assign_phlebotomist_id,
    required this.status,
    required this.outstanding_due,
    required this.smple_status,
    required this.REG_SLOT_DT,
    required this.SESSION_ID,
    required this.EMPLOYEE_ID,
    required this.PAID_AMOUNT,
    required this.REFERAL_SOURCE_ID,
    required this.DISCOUNT_POLICY_ID,
    required this.CLIENT_ID,
    required this.CLIENT_NAME,
    required this.CHANNEL,
    required this.REFERAL_DOCTOR,
    required this.MOBILE_NO2,
    required this.PINCODE,
    required this.AREA_ID,
    required this.LOC_ID,
    required this.SERVICE_NAMES,
    required this.CLINLICAL_SUMMARY,
    required this.QR_IMG,
    required this.DUE_RECOVERED,
  });

  factory Pending_Data_Model.fromJson(Map<String, dynamic> json) {
    return Pending_Data_Model(
      order_id: json['order_id'],
      order_no: json['order_no'],
      umr_no: json['umr_no'],
      customer_name: json['customer_name'],
      order_date: json['order_date'],
      customer_mobile_no: json['customer_mobile_no'],
      customer_age: json['customer_age'],
      customer_gender: json['customer_gender'],
      customer_id: json['customer_id'],
      customer_address: json['customer_address'],
      service_name: json['service_name'],
      schedule_address: json['schedule_address'],
      schedule_dt: json['schedule_dt'],
      instructions: json['instructions'],
      lattitude: json['lattitude'],
      langitude: json['langitude'],
      assign_phlebotomist_id: json['assign_phlebotomist_id'],
      status: json['status'],
      outstanding_due: json['outstanding_due'],
      smple_status: json['smple_status'],
      REG_SLOT_DT: json['REG_SLOT_DT'],
      SESSION_ID: json['SESSION_ID'],
      EMPLOYEE_ID: json['EMPLOYEE_ID'],
      PAID_AMOUNT: json['PAID_AMOUNT'],
      REFERAL_SOURCE_ID: json['REFERAL_SOURCE_ID'],
      DISCOUNT_POLICY_ID: json['DISCOUNT_POLICY_ID'],
      CLIENT_ID: json['CLIENT_ID'],
      CLIENT_NAME: json['CLIENT_NAME'],
      CHANNEL: json['CHANNEL'],
      REFERAL_DOCTOR: json['REFERAL_DOCTOR'],
      MOBILE_NO2: json['MOBILE_NO2'],
      PINCODE: json['PINCODE'],
      AREA_ID: json['AREA_ID'],
      LOC_ID: json['LOC_ID'],
      SERVICE_NAMES: json['SERVICE_NAMES'],
      CLINLICAL_SUMMARY: json['CLINLICAL_SUMMARY'],
      QR_IMG: json['QR_IMG'],
      DUE_RECOVERED: json['DUE_RECOVERED'],
    );
  }
}

class Searcing_Test_Data_Model {
  final SERVICE_ID;
  final SERVICE_CD;
  final SERVICE_NAME;
  final VACCUTAINER;
  final DOSAGE_QTY;
  final SPECIMEN_ID;
  final SPECIMEN_NAME;
  final VACCUTAINER_NAME;
  final VACCUTAINER_ID;
  final VAR_BAR_CD;
  final SERVICE_TYPE_ID;
  final SERVICE_TYPE_NAME;
  final SERVICE_GROUP_ID;
  final SERVICE_GROUP;
  final SERVICECLASS_ID;
  final CONSULTATION_TYPE_ID;
  final DOCTOR_ID;
  final PATIENT_CLASS_ID;
  final EFFECT_FROM_D;
  final EFFECT_TO_DT;
  final RECORD_STATUS;
  final IS_FOREIGN_SERVICE;
  final IS_NUR_STATION;
  final PRICE;
  final ORG_PRICE;
  final DOCTOR_PRICE;
  final OFFER_CONCESSION;
  final SRV_NET_PRICE;
  final IS_OFFER_SRV;
  final MARKET_RATE;
  final TARIFF_ID;
  final CONCESSION;
  final IS_CLINICAL_HIST_REQ;
  final IS_MANDATORY_PRE_RE;
  final SCHEDULE_MASTER_ID;
  final NOTE_NAME;
  final CHISTORY_TEXT;
  final GENDER_ID;
  final PROC_LOGISTICS;
  final REPORT_DISPATCH_TIME;
  final HISTORY_TYPE;
  final HISTORY_TYPE_ID;
  final CNCSN_PERCENT;
  final CNCSN_AMT;
  final REF_CONC;
  final REF_CONC_AMT;
  final IS_FAVOURITE;
  final IS_QUANTITY_EDIT;
  final CONSENT_LETTER_PATH;
  final IS_SCHEDULE_MASTER;
  final TARIFF_NAME;
  final CGST_AMT;
  final SGST_AMT;
  final IGST_AMT;
  final DISC_PERCENTAGE;
  final GST_PCT;
  final CGST_PCT;
  final SGST_PCT;
  final IGST_PCT;
  final HOME_VISIT_SERVICE;
  final PKG_OR_NOT;
  final PKG_SRV_NAME;
  final RAD_SRV;
  final TEST_TYPE_NAME;

  Searcing_Test_Data_Model({
    required this.SERVICE_ID,
    required this.SERVICE_CD,
    required this.SERVICE_NAME,
    required this.VACCUTAINER,
    required this.DOSAGE_QTY,
    required this.SPECIMEN_ID,
    required this.SPECIMEN_NAME,
    required this.VACCUTAINER_NAME,
    required this.VACCUTAINER_ID,
    required this.VAR_BAR_CD,
    required this.SERVICE_TYPE_ID,
    required this.SERVICE_TYPE_NAME,
    required this.SERVICE_GROUP_ID,
    required this.SERVICE_GROUP,
    required this.SERVICECLASS_ID,
    required this.CONSULTATION_TYPE_ID,
    required this.DOCTOR_ID,
    required this.PATIENT_CLASS_ID,
    required this.EFFECT_FROM_D,
    required this.EFFECT_TO_DT,
    required this.RECORD_STATUS,
    required this.IS_FOREIGN_SERVICE,
    required this.IS_NUR_STATION,
    required this.PRICE,
    required this.ORG_PRICE,
    required this.DOCTOR_PRICE,
    required this.OFFER_CONCESSION,
    required this.SRV_NET_PRICE,
    required this.IS_OFFER_SRV,
    required this.MARKET_RATE,
    required this.TARIFF_ID,
    required this.CONCESSION,
    required this.IS_CLINICAL_HIST_REQ,
    required this.IS_MANDATORY_PRE_RE,
    required this.SCHEDULE_MASTER_ID,
    required this.NOTE_NAME,
    required this.CHISTORY_TEXT,
    required this.GENDER_ID,
    required this.PROC_LOGISTICS,
    required this.REPORT_DISPATCH_TIME,
    required this.HISTORY_TYPE,
    required this.HISTORY_TYPE_ID,
    required this.CNCSN_PERCENT,
    required this.CNCSN_AMT,
    required this.REF_CONC,
    required this.REF_CONC_AMT,
    required this.IS_FAVOURITE,
    required this.IS_QUANTITY_EDIT,
    required this.CONSENT_LETTER_PATH,
    required this.IS_SCHEDULE_MASTER,
    required this.TARIFF_NAME,
    required this.CGST_AMT,
    required this.SGST_AMT,
    required this.IGST_AMT,
    required this.DISC_PERCENTAGE,
    required this.GST_PCT,
    required this.CGST_PCT,
    required this.SGST_PCT,
    required this.IGST_PCT,
    required this.HOME_VISIT_SERVICE,
    required this.PKG_OR_NOT,
    required this.PKG_SRV_NAME,
    required this.RAD_SRV,
    required this.TEST_TYPE_NAME,
  });

  factory Searcing_Test_Data_Model.fromJson(Map<String, dynamic> json) {
    return Searcing_Test_Data_Model(
      SERVICE_ID: json['SERVICE_ID'],
      SERVICE_CD: json['SERVICE_CD'],
      SERVICE_NAME: json['SERVICE_NAME'],
      VACCUTAINER: json['VACCUTAINER'],
      DOSAGE_QTY: json['DOSAGE_QTY'],
      SPECIMEN_ID: json['SPECIMEN_ID'],
      SPECIMEN_NAME: json['SPECIMEN_NAME'],
      VACCUTAINER_NAME: json['VACCUTAINER_NAME'],
      VACCUTAINER_ID: json['VACCUTAINER_ID'],
      VAR_BAR_CD: json['VAR_BAR_CD'],
      SERVICE_TYPE_ID: json['SERVICE_TYPE_ID'],
      SERVICE_TYPE_NAME: json['SERVICE_TYPE_NAME'],
      SERVICE_GROUP_ID: json['SERVICE_GROUP_ID'],
      SERVICE_GROUP: json['SERVICE_GROUP'],
      SERVICECLASS_ID: json['SERVICECLASS_ID'],
      CONSULTATION_TYPE_ID: json['CONSULTATION_TYPE_ID'],
      DOCTOR_ID: json['DOCTOR_ID'],
      PATIENT_CLASS_ID: json['PATIENT_CLASS_ID'],
      EFFECT_FROM_D: json['EFFECT_FROM_D'],
      EFFECT_TO_DT: json['EFFECT_TO_DT'],
      RECORD_STATUS: json['RECORD_STATUS'],
      IS_FOREIGN_SERVICE: json['IS_FOREIGN_SERVICE'],
      IS_NUR_STATION: json['IS_NUR_STATION'],
      PRICE: json['PRICE'],
      ORG_PRICE: json['ORG_PRICE'],
      DOCTOR_PRICE: json['DOCTOR_PRICE'],
      OFFER_CONCESSION: json['OFFER_CONCESSION'],
      SRV_NET_PRICE: json['SRV_NET_PRICE'],
      IS_OFFER_SRV: json['IS_OFFER_SRV'],
      MARKET_RATE: json['MARKET_RATE'],
      TARIFF_ID: json[' TARIFF_ID'],
      CONCESSION: json['CONCESSION'],
      IS_CLINICAL_HIST_REQ: json['IS_CLINICAL_HIST_REQ'],
      IS_MANDATORY_PRE_RE: json['IS_MANDATORY_PRE_RE'],
      SCHEDULE_MASTER_ID: json['SCHEDULE_MASTER_ID'],
      NOTE_NAME: json['NOTE_NAME'],
      CHISTORY_TEXT: json['CHISTORY_TEXT'],
      GENDER_ID: json['GENDER_ID'],
      PROC_LOGISTICS: json['PROC_LOGISTICS'],
      REPORT_DISPATCH_TIME: json['REPORT_DISPATCH_TIME'],
      HISTORY_TYPE: json['HISTORY_TYPE'],
      HISTORY_TYPE_ID: json['HISTORY_TYPE_ID'],
      CNCSN_PERCENT: json['CNCSN_PERCENT'],
      CNCSN_AMT: json['CNCSN_AMT'],
      REF_CONC: json['REF_CONC'],
      REF_CONC_AMT: json['REF_CONC_AMT'],
      IS_FAVOURITE: json['IS_FAVOURITE'],
      IS_QUANTITY_EDIT: json['IS_QUANTITY_EDIT'],
      CONSENT_LETTER_PATH: json['CONSENT_LETTER_PATH'],
      IS_SCHEDULE_MASTER: json['IS_SCHEDULE_MASTER'],
      TARIFF_NAME: json['TARIFF_NAME'],
      CGST_AMT: json['CGST_AMT'],
      SGST_AMT: json['SGST_AMT'],
      IGST_AMT: json['IGST_AMT'],
      DISC_PERCENTAGE: json['DISC_PERCENTAGE'],
      GST_PCT: json['GST_PCT'],
      CGST_PCT: json['CGST_PCT'],
      SGST_PCT: json['SGST_PCT'],
      IGST_PCT: json['IGST_PCT'],
      HOME_VISIT_SERVICE: json['HOME_VISIT_SERVICE'],
      PKG_OR_NOT: json['PKG_OR_NOT'],
      PKG_SRV_NAME: json['PKG_SRV_NAME'],
      RAD_SRV: json['RAD_SRV'],
      TEST_TYPE_NAME: json['TEST_TYPE_NAME'],
    );
  }
}

class Test_Displays_Data_Model {
  final SERVICE_NAME;
  final SERVICE_ID;
  final CHIST_TEXT;
  final INSTRUCTIONS;
  final TEST_TYPE_NAME;
  final BILL_SRV_ID;
  final SERVICE_GROUP_NAME;
  final SCHEDULE_ADDRESS;
  final SCHEDULE_ADDRESS1;
  final PRICE;
  final SPECIMEN_ID;
  final VACCUTAINER_ID;
  final SPECIMEN_NAME;
  final VACCUTAINER_NAME;
  final NOTE_NAME;
  final SOURCE_OF_ORDER;
  final SRV_WISE_ORDER;
  final SERVICE_TYPE_ID;
  final SERVICE_GROUP_ID;
  final OFFER_CONCESSION;
  final SRV_NET_PRICE;
  final DUE_BILL;
  final SERVICECLASS_ID;
  final CLASS_SERVICE_ID;
  final PKG_OR_NOT;
  final HOME_VISIT_SERVICE;
  final PKG_SRV_ID;
  final RAD_SRV;
  final SERVICE_STATUS;
  final WF_STATUS;
  final LOC_ID;
  final VACCUTAINER_IDS;
  final SPECIMEN_IDS;
  final SERVICE_IDS;
  final PRICES;
  final IMG_PATH;
  bool checkval;
  dynamic ScandingBardCode;

  TextEditingController barcodeString = TextEditingController();

  Test_Displays_Data_Model({
    required this.SERVICE_NAME,
    required this.SERVICE_ID,
    required this.CHIST_TEXT,
    required this.INSTRUCTIONS,
    required this.TEST_TYPE_NAME,
    required this.BILL_SRV_ID,
    required this.SERVICE_GROUP_NAME,
    required this.SCHEDULE_ADDRESS,
    required this.SCHEDULE_ADDRESS1,
    required this.PRICE,
    required this.SPECIMEN_ID,
    required this.VACCUTAINER_ID,
    required this.SPECIMEN_NAME,
    required this.VACCUTAINER_NAME,
    required this.NOTE_NAME,
    required this.SOURCE_OF_ORDER,
    required this.SRV_WISE_ORDER,
    required this.SERVICE_TYPE_ID,
    required this.SERVICE_GROUP_ID,
    required this.OFFER_CONCESSION,
    required this.SRV_NET_PRICE,
    required this.DUE_BILL,
    required this.SERVICECLASS_ID,
    required this.CLASS_SERVICE_ID,
    required this.PKG_OR_NOT,
    required this.HOME_VISIT_SERVICE,
    required this.PKG_SRV_ID,
    required this.RAD_SRV,
    required this.SERVICE_STATUS,
    required this.WF_STATUS,
    required this.LOC_ID,
    required this.VACCUTAINER_IDS,
    required this.SPECIMEN_IDS,
    required this.SERVICE_IDS,
    required this.PRICES,
    required this.IMG_PATH,
    required this.checkval,
    required this.ScandingBardCode,
  });

  factory Test_Displays_Data_Model.fromJson(Map<String, dynamic> json) {
    return Test_Displays_Data_Model(
      SERVICE_NAME: json['SERVICE_NAME'].toString(),
      SERVICE_ID: json['SERVICE_ID'],
      CHIST_TEXT: json['CHIST_TEXT'],
      INSTRUCTIONS: json['INSTRUCTIONS'],
      TEST_TYPE_NAME: json['TEST_TYPE_NAME'],
      BILL_SRV_ID: json['BILL_SRV_ID'],
      SERVICE_GROUP_NAME: json['SERVICE_GROUP_NAME'],
      SCHEDULE_ADDRESS: json['SCHEDULE_ADDRESS'],
      SCHEDULE_ADDRESS1: json['SCHEDULE_ADDRESS1'],
      PRICE: json['PRICE'],
      SPECIMEN_ID: json['SPECIMEN_ID'],
      VACCUTAINER_ID: json['VACCUTAINER_ID'],
      SPECIMEN_NAME: json['SPECIMEN_NAME'],
      VACCUTAINER_NAME: json['VACCUTAINER_NAME'],
      NOTE_NAME: json['NOTE_NAME'],
      SOURCE_OF_ORDER: json['SOURCE_OF_ORDER'],
      SRV_WISE_ORDER: json['SRV_WISE_ORDER'],
      SERVICE_TYPE_ID: json['SERVICE_TYPE_ID'],
      SERVICE_GROUP_ID: json['SERVICE_GROUP_ID'],
      OFFER_CONCESSION: json['OFFER_CONCESSION'],
      SRV_NET_PRICE: json['SRV_NET_PRICE'],
      DUE_BILL: json['DUE_BILL'],
      SERVICECLASS_ID: json['SERVICECLASS_ID'],
      CLASS_SERVICE_ID: json['CLASS_SERVICE_ID'],
      PKG_OR_NOT: json['PKG_OR_NOT'],
      HOME_VISIT_SERVICE: json['HOME_VISIT_SERVICE'],
      PKG_SRV_ID: json['PKG_SRV_ID'],
      RAD_SRV: json['RAD_SRV'],
      SERVICE_STATUS: json['SERVICE_STATUS'],
      WF_STATUS: json['WF_STATUS'],
      LOC_ID: json['LOC_ID'],
      VACCUTAINER_IDS: json['VACCUTAINER_IDS'],
      SPECIMEN_IDS: json['SPECIMEN_IDS'],
      SERVICE_IDS: json['SERVICE_IDS'],
      PRICES: json['PRICES'],
      IMG_PATH: json['IMG_PATH'],
      checkval: false,
      ScandingBardCode: '',
    );
  }
}

class Dashboard_Data_Model {
  final PHLEBO_PENDING_CNT;
  final REJECT_CNT;
  final CANCEL_CNT;
  final COMPLETED_CNT;
  final TOTAL_CNT;
  final IS_REQ_NEWORDER;
  final IS_REQ_DUE;
  final IS_DISCOUNT_NEED;
  final IS_REQ_BARCODE_Scan_Manual;
  final Is_Req_Wallet;
  final NAVIGATION;

  Dashboard_Data_Model(
      {required this.PHLEBO_PENDING_CNT,
      required this.REJECT_CNT,
      required this.CANCEL_CNT,
      required this.COMPLETED_CNT,
      required this.TOTAL_CNT,
      required this.IS_REQ_NEWORDER,
      required this.IS_REQ_DUE,
      required this.IS_DISCOUNT_NEED,
      required this.IS_REQ_BARCODE_Scan_Manual,
      required this.Is_Req_Wallet,
      required this.NAVIGATION});

  factory Dashboard_Data_Model.fromJson(Map<String, dynamic> json) {
    return Dashboard_Data_Model(
        PHLEBO_PENDING_CNT: json['PHLEBO_PENDING_CNT'],
        REJECT_CNT: json['REJECT_CNT'],
        CANCEL_CNT: json['CANCEL_CNT'],
        COMPLETED_CNT: json['COMPLETED_CNT'],
        TOTAL_CNT: json['TOTAL_CNT'],
        IS_REQ_NEWORDER: json['IS_REQ_NEWORDER'],
        IS_REQ_DUE: json['IS_REQ_DUE'],
        IS_DISCOUNT_NEED: json['IS_DISCOUNT_NEED'],
        IS_REQ_BARCODE_Scan_Manual: json['IS_REQ_BARCODE_Scan_Manual'],
        Is_Req_Wallet: json['Is_Req_Wallet'],
        NAVIGATION: json['NAVIGATION']);
  }
}

class Family_Data_Model {
  final uid;
  final user_name;
  final user_dob;
  final age;
  final user_phone;
  final gender;
  final user_email;
  final user_address;
  final area_id;
  final area_name;
  final city_id;
  final city_name;
  final umr_no;
  final message;

  Family_Data_Model({
    required this.uid,
    required this.user_name,
    required this.user_dob,
    required this.age,
    required this.user_phone,
    required this.gender,
    required this.user_email,
    required this.user_address,
    required this.area_id,
    required this.area_name,
    required this.city_id,
    required this.city_name,
    required this.umr_no,
    required this.message,
  });

  factory Family_Data_Model.fromJson(Map<String, dynamic> json) {
    return Family_Data_Model(
      uid: json['uid'],
      user_name: json['user_name'],
      user_dob: json['user_dob'],
      age: json['age'],
      user_phone: json['user_phone'],
      gender: json['gender'],
      user_email: json['user_email'],
      user_address: json['user_address'],
      area_id: json['area_id'],
      area_name: json['area_name'],
      city_id: json['city_id'],
      city_name: json['city_name'],
      umr_no: json['umr_no'],
      message: json['message'],
    );
  }
}
